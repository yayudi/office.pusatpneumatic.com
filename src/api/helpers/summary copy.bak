// src\api\helpers\summary.js
import { hitungDendaTelat, isWeekend } from "@/api/helpers/attendance.js"
import {
  JAM_KERJA_MULAI,
  JAM_KERJA_SELESAI,
  JAM_KERJA_SELESAI_SABTU,
  TOLERANSI_MENIT,
  TARIF_LEMBUR_PER_JAM,
} from "@/api/config.js"
import { formatJamMenit } from "@/api/helpers/time.js"

// ⬇️ input: user yang sudah hasil normalizeLogs
export function calculateSummaryForUser(user, year, month) {
  let totalWork=0,
      totalLembur=0,
      totalBreak=0,
      totalDenda=0,totalTelat=0,
      totalEarly=0,
      missing=0,
      libur=0;
  const dendaPerHari = [];

  if (user.raw?.summary?.length) {
    // langsung mapping sesuai format summary JSON
    const summary = {
      workMinutes: user.raw.summary[0],
      workHours: formatJamMenit(user.raw.summary[0]),
      lemburHours: formatJamMenit(user.raw.summary[1]),
      telatHours: formatJamMenit(user.raw.summary[2]),
      earlyOutHours: formatJamMenit(user.raw.summary[3]),
      absenceDays: user.raw.summary[4],
      dendaTelat: user.raw.summary[5],
      uangLembur: user.raw.summary[6]
    }

    console.log(
      `📊 [${user.nama}] Ringkasan dari raw.summary`,
      summary
    )
    return summary
  }

  // fallback ke perhitungan manual
  const logs = user.logs || []

  if (!logs.length) {
    const summary = {
      workMinutes: 0,
      workHours: "00:00",
      lemburHours: "00:00",
      uangLemburKotor: 0,
      jamKerjaIdeal: "00:00",
      dendaTelat: 0,
      uangLembur: 0,
      telatHours: "00:00",
      earlyOutHours: "00:00",
      absenceDays: 0,
      missingDays: 0,
      holidayDays: 0,
      breakHours: "00:00",
      dendaPerHari: []
    }
    console.log(
      `📊 [${user.nama}] Tidak ada logs →`,
      summary
    )
    return summary
  }

  logs.forEach(log => {
    if (log.holiday && log.isEmpty) {
      console.log(`📅 Tanggal ${log.tanggal}: Hari libur kosong → SKIP`)
      libur++
      return
    }

    if (!log.jamMasuk || !log.jamKeluar) {
      console.log(`📅 Tanggal ${log.tanggal}: Data tidak lengkap (jamMasuk=${log.jamMasuk}, jamKeluar=${log.jamKeluar}) → SKIP`)
      missing++
      return
    }

    const jamKerjaEnd = isWeekend(year, month, log.tanggal)
      ? JAM_KERJA_SELESAI_SABTU
      : JAM_KERJA_SELESAI

    const totalBreaks = log.breaks.reduce((a, b) => a + b, 0)
    const durasi = log.jamKeluar - log.jamMasuk - log.breaks.reduce((a, b) => a + b, 0)
    totalWork += durasi

    // 📝 Log detail
    console.log(
      `📅 ${year}-${month}-${log.tanggal.toString().padStart(2,"0")}`,
      `⏰ Masuk: ${log.jamMasuk} (${formatJamMenit(log.jamMasuk)})`,
      `Keluar: ${log.jamKeluar} (${formatJamMenit(log.jamKeluar)})`,
      `Breaks: ${totalBreaks} menit`,
      `➡️ Durasi: ${durasi} menit (${formatJamMenit(durasi)})`
    )

    // Telat
    const telat = log.jamMasuk - JAM_KERJA_MULAI
    if (telat > TOLERANSI_MENIT) {
      totalTelat += telat
      const dendaHariIni = hitungDendaTelat(telat)
      totalDenda += dendaHariIni
      dendaPerHari.push({ tanggal: log.tanggal, telat, denda: dendaHariIni })
      console.log(`   ⚠️ Telat ${telat} menit → Denda Rp${dendaHariIni.toLocaleString()}`)
    }

    // Early Out
    const early = jamKerjaEnd - log.jamKeluar
    if (early > TOLERANSI_MENIT) {
      totalEarly += early
      console.log(`   ⚠️ Pulang cepat ${early} menit`)
    }

    // Lembur
    const lembur = log.jamKeluar - jamKerjaEnd
    if (lembur > TOLERANSI_MENIT) {
      totalLembur += lembur
      console.log(`   💪 Lembur ${lembur} menit (${formatJamMenit(lembur)})`)
    }

    // Break
    totalBreak += log.breaks.reduce((a, b) => a + b, 0)
  })

  const absence = logs.filter(l => !l.holiday && l.isEmpty).length
  const uangLemburKotor = Math.floor(totalLembur / 60) * TARIF_LEMBUR_PER_JAM
  const uangLembur = Math.max(uangLemburKotor - totalDenda, 0)

  const summary = {
    workMinutes: totalWork,
    workHours: formatJamMenit(totalWork),
    lemburHours: formatJamMenit(totalLembur),
    uangLemburKotor,
    dendaTelat: totalDenda,
    uangLembur,
    telatHours: formatJamMenit(totalTelat),
    earlyOutHours: formatJamMenit(totalEarly),
    absenceDays: absence,
    missingDays: missing,
    holidayDays: libur,
    breakHours: formatJamMenit(totalBreak),
    dendaPerHari,
  }

  console.log(
    `📊 [${user.nama}] Ringkasan akhir`,
    {
      workMinutes: summary.workMinutes,
      workHours: summary.workHours,
      lemburHours: summary.lemburHours,
      telatHours: summary.telatHours,
      earlyOutHours: summary.earlyOutHours,
      absenceDays: summary.absenceDays,
      dendaTelat: summary.dendaTelat,
      uangLembur: summary.uangLembur,
    }
  )

  return summary
}
